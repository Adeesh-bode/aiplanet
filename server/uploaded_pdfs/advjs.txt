----------- promise: (Async/Await: just Provides a more synchronous-looking code )
# Creating a Promise:
You can create a new promise using the Promise constructor, which takes a function (executor) with two parameters: 
resolve and reject. Call resolve when the async operation is successful and reject when it fails.

javascript
Copy code
const myPromise = new Promise((resolve, reject) => {
    const success = true; // Simulate success or failure

    if (success) {
        resolve('Operation was successful!');
    } else {
        reject('Operation failed.');
    }
});
# Consuming a Promise:
Use .then() to handle a fulfilled promise and .catch() to handle a rejected promise. 
Use .finally() to execute code regardless of the promise's outcome.

javascript
Copy code
myPromise
    .then(result => {
        console.log(result); // 'Operation was successful!'
    })
    .catch(error => {
        console.error(error); // 'Operation failed.'
    })
    .finally(() => {
        console.log('Promise has been handled.');
    });

------------------------------
>>>Fetching Data with Promises:
function fetchData(url) {
    return fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log(data);
            return data;
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
}

fetchData('https://api.example.com/data');
>>>Using Promises with async/await ( observe data )
async function fetchData(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log(data);
        return data;
    } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
    }
}

fetchData('https://api.example.com/data');


>>>>>>>>>>>>>>>>>>>> SAME FOR AXIOS AS WELL
const axios = require('axios');

axios.get('https://api.example.com/data')
    .then(response => {
        console.log(response.data);
    })
    .catch(error => {
        console.error('Error fetching data:', error);
    });

|||||||||||||||||||||||||||||||||||||||||||||||||||||||| parallel with asyn await 
async function fetchData() {
    try {
        const response = await axios.get('https://api.example.com/data');
        console.log(response.data);
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

fetchData();
